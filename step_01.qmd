---
title: "Pandemic projections"
author: 
  - "Imperial College London"
format: revealjs
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
# install dev versions of packages
# pak::pak("jameel-institute/daedalus")
# pak::pak("jameel-institute/daedalus.compare@develop")
library(daedalus)
library(daedalus.compare)

library(dplyr)
library(tidyr)
library(ggplot2)
library(ggdist)
```

```{r}
fn_theme <- function() {
  ggplot2::theme(
    legend.position = "top",
    panel.grid.major = element_line(
      colour = "grey"
    ),
    panel.grid.minor = element_line(
      colour = "grey", linetype = "dashed"
    )
  )
}
```

```{r}
x_label_days <- "Days after first case"
measure_levels <- c(
  "daily_infections", "daily_hospitalisations",
  "total_hosp", "daily_deaths"
)
```

```{r echo=FALSE, include=FALSE}
# generate infection using H1N1 as a base
# this is the least transmissible infection for which {daedalus} has data
disease_x <- daedalus_infection("influenza_2009")
r0 <- get_data(disease_x, "r0")
r0_samples <- withr::with_seed(
  1, rbeta(100, 2, 5)
) * r0 + 1.0
r0_samples <- round(r0_samples, 4)
r0_samples <- scales::rescale(r0_samples, c(1.0, 2))
r0_samples <- sort(r0_samples)
```

```{r echo=FALSE, include=FALSE}
# get 95% confidence intervals around R0
ci_95 <- ci(r0_samples)
r0_summary <- c(
  lower = median(r0_samples) - ci_95,
  median = median(r0_samples),
  upper = median(r0_samples) + ci_95
)
r0_summary <- round(r0_summary, 3)
```

### Chosen R0

```{r}
r0_phase_1 <- median(r0_samples)
r0_phase_2 <- quantile(r0_samples, 0.83)
```

### Severity profile

```{r echo=FALSE, include=FALSE}
# draw mortality profile so working and school age worst affected
severity_profile <- c(0.2, 1.5, 2, 1.5)

# varying mort risk
eta <- get_data(disease_x, "eta")

# check hosp profile
eta / mean(eta)

# draw eta samples
eta_samples <- withr::with_seed(
  1, rbeta(100, 2, 5)
) * mean(eta) + mean(eta) / 2


# get mean mortality|hosp and scale as well
omega <- get_data(disease_x, "omega")
omega <- mean(omega) * 1.5

# bump up 65+ recovery
gamma_H <- get_data(disease_x, "gamma_H")
gamma_H[4] <- mean(gamma_H)
gamma_H[3] <- gamma_H[3] * 0.8
```

```{r echo=FALSE, include=FALSE}
# make list of infection objects
disease_list <- Map(
  r0_samples, eta_samples,
  f = function(x, y) {
    daedalus_infection(
      "influenza_2009",
      r0 = x,
      eta = y * severity_profile,
      omega = omega * severity_profile,
      gamma_H = gamma_H
    )
  }
)
disease_tags <- glue::glue("sample_{seq_along(disease_list)}")
```

### Epidemic reporting multiples

```{r}
case_reporting <- 0.1 # 10% infections reported as cases
hosp_reporting <- 1.0 # 100% hosps assumed/reported to be epidemic
death_reporting <- 0.95 # 95% deaths reported as epidemic deaths
```

### Response options

```{r}
response_levels <- rev(names(daedalus.data::closure_data))
```

```{r}
day_now <- 30
horizon <- 60
```

<!-- ### Run 0 - 30 model -->

<!-- ```{r} -->
<!-- data_initial = daedalus( -->
<!--   "GBR", -->
<!--   daedalus_infection( -->
<!--     "influenza_2009", -->
<!--     r0 = r0_phase_1 -->
<!--   ), -->
<!--   time_end = 29 -->
<!-- ) -->
<!-- incidence_initial = get_incidence( -->
<!--   data_initial, "infections" -->
<!-- ) -->

<!-- # get epidemic size day 30s -->
<!-- epidemic_size_30 = tail(incidence_initial$value, 1) -->
<!-- ``` -->

### Run Phase 1 scenarios

```{r echo=FALSE, include=FALSE}
gbr <- daedalus_country("GBR")
hosp_capacity <- gbr$hospital_capacity

# prepare outcomes for two scenarios
output <- run_scenarios(
  "GBR",
  disease_list,
  response = c(
    "none", "school_closures",
    "economic_closures", "elimination"
  ),
  response_time = day_now + 1,
  response_duration = horizon - day_now,
  time_end = horizon,
  initial_state_manual = list(
    p_infectious = 1 / 70e6,
    p_asymptomatic = 0.99
  )
)
```

```{r echo=FALSE, include=FALSE}
# get epi curve data and prepare for plotting
data_epi_curve <- get_epicurve_data(output, disease_tags, format = "long")
data_epi_curve <- mutate(
  data_epi_curve,
  response = forcats::fct_relevel(response, response_levels)
)

# get reported values
data_epi_curve <- mutate(
  data_epi_curve,
  reporting_rate = case_when(
    measure == "daily_deaths" ~ death_reporting,
    measure == "daily_infections" ~ case_reporting,
    measure == "daily_hospitalisations" ~ hosp_reporting,
    measure == "total_hosp" ~ hosp_reporting
  ),
  reported_value = value * reporting_rate
)

data_epi_curve_summary <- group_by(
  data_epi_curve, time, response, measure
) %>%
  curve_interval(
    value, reported_value,
    .width = c(0.5, 0.95)
  )
```

```{r echo=FALSE, include=FALSE}
data_epi_curve_summary_unmit <- filter(
  data_epi_curve_summary, response == "none"
)
```

```{r echo=FALSE, include=FALSE}
data_epi_summary <- get_summary_data(output, disease_tags, format = "long")
data_epi_summary <- mutate(
  data_epi_summary,
  response = forcats::fct_relevel(response, response_levels)
)

# get reported values
data_epi_summary <- mutate(
  data_epi_summary,
  reporting_rate = case_when(
    measure == "total_deaths" ~ death_reporting,
    measure == "epidemic_size" ~ case_reporting,
    measure == "total_hospitalisations" ~ hosp_reporting
  ),
  reported_value = value * reporting_rate
)
```

```{r echo=FALSE, include=FALSE}
data_deaths <- get_summary_data(
  output, disease_tags,
  format = "long", measures = "deaths", groups = "age_group"
)
data_deaths <- mutate(
  data_deaths,
  response = forcats::fct_relevel(response, response_levels),
  reported_value = value * death_reporting
)

# get naive cfr
data_cfr <- get_summary_data(
  output, disease_tags,
  format = "long", measures = c("infections", "deaths"),
  groups = "age_group"
)
data_cfr <- mutate(
  data_cfr,
  response = forcats::fct_relevel(response, response_levels),
  reporting_rate = case_when(
    measure == "total_deaths" ~ death_reporting,
    measure == "epidemic_size" ~ case_reporting
  ),
  reported_value = value * reporting_rate
)

data_cfr <-
  data_cfr %>%
  select(response, age_group, measure, reported_value, tag) %>%
  pivot_wider(
    id_cols = c("response", "age_group", "tag"), names_from = "measure",
    values_from = "reported_value"
  ) %>%
  mutate(
    cfr = total_deaths / epidemic_size
  )
```

```{r}
data_deaths_unmit <- filter(data_deaths, response == "none")
```

```{r echo=FALSE, include=FALSE}
data_cost_output <- get_cost_data(output, disease_tags, format = "long") %>%
  filter(domain != "life_years")

data_cost_output <- mutate(
  data_cost_output,
  response = forcats::fct_relevel(response, response_levels)
)

data_cost_life <- filter(data_cost_output, domain == "life_value")
```

```{r echo=FALSE, include=FALSE}
# NOTE: education costs are very similar across R0
# as the main component is future earnings lost due to school closures;
# this aspect is deterministic: value school year * closure duration;
# summaring this as a median to show a bar chart
data_cost_edu <- filter(data_cost_output, domain == "education") %>%
  summarise(
    cost = median(cost), .by = "response"
  )
```

```{r echo=FALSE, include=FALSE}
data_econ_costs <- get_econ_cost_data(output)

data_econ_costs <- mutate(
  data_econ_costs,
  response = forcats::fct_relevel(response, response_levels)
)

# separate data on closures (deterministic) from absences
# and summarise closure costs using median
data_econ_cost_closures <- filter(
  data_econ_costs, cost_type == "economic_cost_closures"
) %>%
  group_by(response) %>%
  summarise(cost = median(cost))

data_econ_cost_absences <- filter(
  data_econ_costs, cost_type == "economic_cost_absences"
)
```

# Unmitigated pandemic

## Epidemic projections

```{r echo=FALSE, include=FALSE}
curve_measure_labels <- c(
  daily_deaths = "New deaths",
  daily_hospitalisations = "Daily hospital demand",
  total_hosp = "Total hospital demand"
)
```

### Daily infections: Explainer

```{r}
plot_daily_cases_unmit_explainer <-
  ggplot() +
  geom_line(
    data = data_epi_curve %>%
      filter(measure == "daily_infections", response == "none"),
    aes(time, reported_value, group = tag),
    alpha = 0.8
  ) +
  geom_vline(
    xintercept = day_now,
    col = "red", linetype = "dashed"
  ) +
  scale_fill_brewer(
    palette = "Blues",
    labels = function(x) {
      scales::percent(as.numeric(x))
    }
  ) +
  scale_y_continuous(
    labels = scales::comma
  ) +
  labs(
    x = x_label_days,
    y = "New cases",
    fill = "Proj. interv."
  ) +
  # xlim(0, 60) +
  theme_bw(base_size = 24, base_family = "Arial") +
  fn_theme()

ggsave(
  "figures/plot_unmit_daily_cases_explainer.png",
  plot_daily_cases_unmit_explainer
)
```

```{r}
# this is the true infections
plot_daily_infections_unmit <-
  ggplot() +
  geom_line(
    data = data_epi_curve %>%
      filter(measure == "daily_infections", response == "none"),
    aes(time, value, group = tag),
    alpha = 0.8
  ) +
  geom_lineribbon(
    data = data_epi_curve_summary_unmit %>%
      filter(measure == "daily_infections"),
    aes(time, value, ymin = value.lower, ymax = value.upper),
    col = "black",
    alpha = 0.8
  ) +
  geom_vline(
    xintercept = day_now,
    col = "red", linetype = "dashed"
  ) +
  scale_fill_viridis_d(
    begin = 0.1, direction = -1,
    labels = function(x) {
      scales::percent(as.numeric(x))
    }
  ) +
  scale_y_continuous(
    labels = scales::comma
  ) +
  labs(
    x = x_label_days,
    y = "Daily new infections",
    fill = "Proj. interv."
  ) +
  xlim(20, 60) +
  theme_bw(base_size = 24, base_family = "Arial") +
  fn_theme()

ggsave(
  "figures/DO_NOT_SHOW_unmit_daily_infections.png",
  plot = plot_daily_infections_unmit, height = 7, width = 10
)
```

### Daily reported cases

```{r}
plot_daily_cases_unmit <-
  ggplot() +
  geom_line(
    data = data_epi_curve %>%
      filter(measure == "daily_infections", response == "none"),
    aes(time, reported_value, group = tag),
    alpha = 0.8
  ) +
  geom_lineribbon(
    data = data_epi_curve_summary_unmit %>%
      filter(measure == "daily_infections"),
    aes(time, reported_value,
      ymin = reported_value.lower,
      ymax = reported_value.upper
    ),
    col = "black",
    alpha = 0.8
  ) +
  geom_vline(
    xintercept = day_now,
    col = "red", linetype = "dashed"
  ) +
  scale_fill_viridis_d(
    begin = 0.1, direction = -1,
    labels = function(x) {
      scales::percent(as.numeric(x))
    }
  ) +
  scale_y_continuous(
    labels = scales::comma
  ) +
  labs(
    x = x_label_days,
    y = "New cases",
    caption = "Projection includes some under-ascertainment.",
    fill = "Proj. interv."
  ) +
  xlim(20, 60) +
  theme_bw(base_size = 24, base_family = "Arial") +
  fn_theme()

ggsave(
  "figures/plot_unmit_daily_cases.png",
  plot = plot_daily_cases_unmit, height = 7, width = 10
)
```

```{r echo=FALSE}
measures <- c("daily_deaths", "daily_hospitalisations", "total_hosp")
reporting_rates <- c(death_reporting, hosp_reporting, hosp_reporting)

Map(
  measures, curve_measure_labels, reporting_rates,
  f = function(m, l, reporting) {
    plot_epi_curves_unmit <-
      ggplot() +
      geom_line(
        data = data_epi_curve %>%
          filter(measure == m, response == "none"),
        aes(time, reported_value, group = tag),
        alpha = 0.8, linewidth = 0.2
      ) +
      geom_lineribbon(
        data = data_epi_curve_summary_unmit %>%
          filter(measure == m),
        aes(time, reported_value,
          ymin = reported_value.lower,
          ymax = reported_value.upper
        ),
        col = "black",
        alpha = 0.8
      ) +
      geom_vline(
        xintercept = day_now,
        col = "red", linetype = "dashed"
      ) +
      scale_fill_viridis_d(
        begin = 0.1, direction = -1,
        labels = function(x) {
          scales::percent(as.numeric(x))
        }
      ) +
      scale_y_continuous(
        labels = scales::comma
      ) +
      labs(
        x = x_label_days,
        y = l,
        fill = "Proj. interv."
      ) +
      xlim(20, 60) +
      theme_bw(base_size = 24, base_family = "Arial") +
      fn_theme()

    if (m %in% c("total_hosp", "daily_hospitalisations")) {
      plot_epi_curves_unmit <- plot_epi_curves_unmit +
        geom_hline(
          yintercept = hosp_capacity,
          col = "red", linetype = "dashed"
        )
    }

    filename <- glue::glue("figures/plot_unmit_{m}.png")
    ggsave(
      filename,
      plot = plot_epi_curves_unmit,
      height = 7, width = 10
    )
  }
)
```

## Infections, hospital demand, deaths

```{r echo=FALSE}
data_epi_summary_unmit <- filter(
  data_epi_summary, response == "none"
)
```

```{r echo=FALSE}
summary_measure_labels <- c(
  epidemic_size = "Cumulative infections",
  total_deaths = "Cumulative deaths"
)
```

```{r echo=FALSE}
plot_unmit_epi_summary <-
  ggplot(
    data_epi_summary_unmit %>%
      filter(measure != "total_hospitalisations")
  ) +
  stat_interval(
    aes(
      y = reported_value,
      color = after_stat(
        level
      )
    ),
    .width = c(0.5, 0.95),
    linewidth = 30, alpha = 0.8,
    normalize = "groups"
  ) +
  stat_pointinterval(
    aes(y = reported_value),
    .width = c(0.5, 0.95)
  ) +
  facet_wrap(
    facets = vars(measure),
    labeller = labeller(
      measure = summary_measure_labels
    ),
    scales = "free"
  ) +
  scale_y_continuous(
    labels = scales::label_comma()
  ) +
  scale_colour_viridis_d(
    begin = 0.1, direction = -1,
    labels = function(x) {
      scales::percent(as.numeric(x))
    }
  ) +
  labs(
    x = NULL,
    y = "Count (up to day 60)",
    colour = "Proj. interv.",
    caption = "Projection includes some under-ascertainment.",
  ) +
  guides(
    colour = guide_legend(
      override.aes = list(linewidth = 3)
    )
  ) +
  theme_bw(base_size = 24, base_family = "Arial") +
  fn_theme() +
  theme(axis.text.x = element_blank())

ggsave(
  "figures/plot_unmit_epi_summary.png",
  plot = plot_unmit_epi_summary,
  height = 7, width = 10
)
```

## Deaths by age group

```{r echo=FALSE}
plot_unmit_deaths_by_age <-
  ggplot(data_deaths_unmit) +
  stat_interval(
    aes(
      forcats::fct_relevel(
        age_group,
        c("0-4", "5-19", "20-64", "65+")
      ),
      y = reported_value,
      color = after_stat(
        level
      )
    ),
    .width = c(0.5, 0.95),
    linewidth = 30, alpha = 0.8,
    normalize = "groups"
  ) +
  stat_pointinterval(
    aes(age_group, y = reported_value),
    .width = c(0.5, 0.95),
  ) +
  scale_y_continuous(
    labels = scales::comma
  ) +
  scale_colour_viridis_d(
    begin = 0.1, direction = -1,
    labels = function(x) {
      scales::percent(as.numeric(x))
    }
  ) +
  labs(
    y = "Cumulative deaths (up to day 60)",
    x = "Age group",
    colour = "Proj. interv.",
    caption = "Projection includes some under-ascertainment."
  ) +
  guides(
    colour = guide_legend(
      override.aes = list(linewidth = 3)
    )
  ) +
  theme_bw(
    base_size = 24, base_family = "Arial"
  ) +
  fn_theme()

ggsave(
  "figures/plot_unmit_deaths_by_age.png",
  plot_unmit_deaths_by_age,
  height = 7, width = 10
)
```

### CFR by age group

```{r}
plot_cfr_by_age <-
  ggplot(data_cfr) +
  stat_interval(
    aes(
      forcats::fct_relevel(
        age_group,
        c("0-4", "5-19", "20-64", "65+")
      ),
      y = cfr,
      color = after_stat(
        level
      )
    ),
    .width = c(0.5, 0.95),
    linewidth = 30, alpha = 0.8,
    normalize = "groups"
  ) +
  stat_pointinterval(
    aes(age_group, y = cfr),
    .width = c(0.5, 0.95),
  ) +
  scale_y_continuous(
    labels = scales::percent
  ) +
  scale_colour_viridis_d(
    begin = 0.1, direction = -1,
    labels = function(x) {
      scales::percent(as.numeric(x))
    }
  ) +
  labs(
    y = "CFR (naive)",
    x = "Age group",
    colour = "Proj. interv."
  ) +
  guides(
    colour = guide_legend(
      override.aes = list(linewidth = 3)
    )
  ) +
  theme_bw(
    base_size = 24, base_family = "Arial"
  ) +
  fn_theme()

ggsave(
  "figures/plot_unmit_cfr_by_age.png",
  plot_cfr_by_age,
  height = 7, width = 10
)
```

## Lost life years, future earnings, and GVA

```{r echo=FALSE}
data_cost_output_unmit <- filter(
  data_cost_output, response == "none"
)
```

```{r echo=FALSE}
loss_measure_labels <- c(
  "GVA", "Future earnings", "Life years"
)
```

```{r echo=FALSE}
plot_unmit_gva_loss <-
  ggplot(data_cost_output_unmit) +
  stat_interval(
    aes(
      x = domain, y = cost,
      color = after_stat(
        level
      )
    ),
    .width = c(0.5, 0.95),
    linewidth = 30, alpha = 0.8,
    normalize = "groups"
  ) +
  stat_pointinterval(
    aes(domain, cost),
    .width = c(0.5, 0.95),
  ) +
  scale_x_discrete(
    labels = loss_measure_labels
  ) +
  scale_y_continuous(
    labels = scales::label_currency(
      scale = 0.7e-3, prefix = "£", suffix = " B"
    )
  ) +
  scale_colour_viridis_d(
    begin = 0.1, direction = -1,
    labels = function(x) {
      scales::percent(as.numeric(x))
    }
  ) +
  labs(
    x = NULL,
    y = "Cumulative value lost (billion £)",
    col = "Proj. interv.",
    caption = "Valuation of losses from reduced GVA, reduced education, and deaths."
  ) +
  guides(
    colour = guide_legend(
      override.aes = list(linewidth = 3)
    )
  ) +
  theme_bw(24, "Arial") +
  fn_theme()

ggsave(
  "figures/plot_unmit_gva_loss.png",
  plot_unmit_gva_loss,
  height = 7, width = 10
)
```

# Mitigation measures

## Epidemic projections

```{r}
curve_measure_labels <- c(
  daily_infections = "Daily cases",
  daily_deaths = "Daily deaths",
  daily_hospitalisations = "Daily hospital demand",
  total_hosp = "Total hospital demand"
)
```

```{r}
response_labels <- c(
  none = "Unmitigated",
  economic_closures = "Busin. clos. (light)",
  elimination = "S+B clos. (severe)",
  school_closures = "S (severe) + B (light)"
)
```

```{r}
measures <- c(
  "daily_infections", "daily_deaths", "daily_hospitalisations", "total_hosp"
)

Map(
  measures, curve_measure_labels,
  f = function(m, l) {
    plot_epi_curves_compare <-
      ggplot() +
      geom_line(
        data = data_epi_curve %>%
          filter(measure == m),
        aes(time, reported_value, group = tag),
        alpha = 0.8
      ) +
      geom_lineribbon(
        data = data_epi_curve_summary %>%
          filter(measure == m),
        aes(time, reported_value,
          ymin = reported_value.lower,
          ymax = reported_value.upper
        ),
        col = "black",
        alpha = 0.8
      ) +
      facet_grid(
        cols = vars(response),
        labeller = labeller(
          response = response_labels
        )
      ) +
      scale_fill_viridis_d(
        begin = 0.1, direction = -1,
        labels = function(x) {
          scales::percent(as.numeric(x))
        }
      ) +
      scale_y_continuous(
        labels = scales::comma
      ) +
      labs(
        x = x_label_days,
        y = l,
        fill = "Proj. interv."
      ) +
      xlim(20, 60) +
      theme_bw(base_size = 24, base_family = "Arial") +
      fn_theme()

    if (m %in% c("total_hosp", "daily_hospitalisations")) {
      plot_epi_curves_compare <- plot_epi_curves_compare +
        geom_hline(
          yintercept = hosp_capacity,
          col = "red", linetype = "dashed"
        ) +
        annotate(
          "text",
          x = horizon * 2 / 3,
          y = hosp_capacity,
          label = "Surge hosp. cap.",
          size = 8,
          colour = "red"
        )
    }

    if (m == "daily_infections") {
      m <- "daily_cases"
    }

    filename <- glue::glue("figures/plot_compare_{m}.png")
    ggsave(
      filename,
      plot = plot_epi_curves_compare,
      width = 21, height = 6
    )
  }
)
```

```{r}
Map(
  measures, curve_measure_labels,
  f = function(m, l) {
    plot_epi_curves_compare <-
      ggplot() +
      geom_line(
        data = data_epi_curve %>%
          filter(measure == m),
        aes(time, reported_value, group = tag),
        alpha = 0.8
      ) +
      geom_lineribbon(
        data = data_epi_curve_summary %>%
          filter(measure == m),
        aes(time, reported_value,
          ymin = reported_value.lower,
          ymax = reported_value.upper
        ),
        col = "black",
        alpha = 0.8
      ) +
      facet_wrap(
        vars(response),
        labeller = labeller(
          response = response_labels
        )
      ) +
      scale_fill_viridis_d(
        begin = 0.1, direction = -1,
        labels = function(x) {
          scales::percent(as.numeric(x))
        }
      ) +
      scale_y_continuous(
        labels = scales::comma
      ) +
      labs(
        x = x_label_days,
        y = l,
        fill = "Proj. interv."
      ) +
      xlim(20, 60) +
      theme_bw(base_size = 24, base_family = "Arial") +
      fn_theme()

    if (m %in% c("total_hosp", "daily_hospitalisations")) {
      plot_epi_curves_compare <- plot_epi_curves_compare +
        geom_hline(
          yintercept = hosp_capacity,
          col = "red", linetype = "dashed"
        ) +
        annotate(
          "text",
          x = horizon * 2 / 3,
          y = hosp_capacity,
          label = "Surge hosp. cap.",
          size = 8,
          colour = "red"
        )
    }

    if (m == "daily_infections") {
      m <- "daily_cases"
    }

    filename <- glue::glue("figures/plot_compare_{m}_square.png")
    ggsave(
      filename,
      plot = plot_epi_curves_compare,
      width = 14, height = 14
    )
  }
)
```

## Infections, hospital demand, deaths

```{r echo=FALSE}
# plot uncertainty in epi outcomes
plot_compare_epi_summary <-
  ggplot(
    data_epi_summary %>%
      filter(measure != "total_hospitalisations")
  ) +
  stat_interval(
    aes(
      response,
      y = reported_value,
      color = after_stat(
        level
      )
    ),
    .width = c(0.5, 0.95),
    linewidth = 20, alpha = 0.8,
    normalize = "groups"
  ) +
  stat_pointinterval(
    aes(response, y = reported_value),
    .width = c(0.5, 0.95)
  ) +
  facet_wrap(
    facets = vars(measure),
    labeller = labeller(
      measure = summary_measure_labels
    ),
    scales = "free"
  ) +
  scale_y_continuous(
    labels = scales::comma
  ) +
  scale_x_discrete(
    labels = response_labels,
    guide = guide_axis(n.dodge = 2)
  ) +
  scale_colour_viridis_d(
    begin = 0.1, direction = -1,
    labels = function(x) {
      scales::percent(as.numeric(x))
    }
  ) +
  labs(
    x = NULL,
    y = "Count",
    colour = "Proj. interval"
  ) +
  guides(
    colour = guide_legend(
      override.aes = list(linewidth = 3)
    )
  ) +
  theme_bw(24, "Arial") +
  fn_theme()

filename <- glue::glue("figures/plot_compare_epi_summary.png")
ggsave(
  filename,
  plot = plot_compare_epi_summary,
  width = 14, height = 6
)
```

## Table: Hospital capacity breaches

```{r}
data_epi_curve %>%
  filter(
    measure == "total_hosp"
  ) %>%
  group_by(response, tag) %>%
  filter(
    value == max(reported_value),
    value > hosp_capacity
  ) %>%
  group_by(response) %>%
  count(
    name = "hosp_capacity_exceeded_pct"
  ) %>%
  readr::write_csv(
    "tables/table_hosp_capacity_breaches.csv"
  )
```

## Deaths by age group

```{r}
plot_compare_deaths_by_age <-
  ggplot(data_deaths) +
  stat_interval(
    aes(
      response,
      y = reported_value,
      color = after_stat(
        level
      )
    ),
    .width = c(0.5, 0.95),
    linewidth = 20, alpha = 0.8,
    normalize = "groups"
  ) +
  stat_pointinterval(
    aes(response, y = reported_value)
  ) +
  facet_grid(
    cols = vars(
      forcats::fct_relevel(
        age_group,
        c("0-4", "5-19", "20-64", "65+")
      )
    ),
    labeller = labeller(
      response = response_labels
    )
  ) +
  scale_y_continuous(
    labels = scales::comma
  ) +
  scale_x_discrete(
    labels = response_labels,
    guide = guide_axis(n.dodge = 2)
  ) +
  scale_colour_viridis_d(
    begin = 0.1, direction = -1,
    labels = function(x) {
      scales::percent(as.numeric(x))
    }
  ) +
  labs(
    y = "Cumulative deaths",
    x = NULL,
    colour = "Proj. interval"
  ) +
  guides(
    colour = guide_legend(
      override.aes = list(linewidth = 3)
    )
  ) +
  theme_bw(24, "Arial") +
  fn_theme()

ggsave(
  "figures/plot_compare_deaths_by_age.png",
  plot_compare_deaths_by_age,
  height = 10, width = 25
)
```

```{r}
plot_compare_deaths_by_age <-
  ggplot(data_deaths) +
  stat_interval(
    aes(
      response,
      y = reported_value,
      color = after_stat(
        level
      )
    ),
    .width = c(0.5, 0.95),
    linewidth = 20, alpha = 0.8,
    normalize = "groups"
  ) +
  stat_pointinterval(
    aes(response, y = reported_value)
  ) +
  facet_wrap(
    vars(
      forcats::fct_relevel(
        age_group,
        c("0-4", "5-19", "20-64", "65+")
      )
    ),
    labeller = labeller(
      response = response_labels
    )
  ) +
  scale_y_continuous(
    labels = scales::comma
  ) +
  scale_x_discrete(
    labels = response_labels,
    guide = guide_axis(n.dodge = 2)
  ) +
  scale_colour_viridis_d(
    begin = 0.1, direction = -1,
    labels = function(x) {
      scales::percent(as.numeric(x))
    }
  ) +
  labs(
    y = "Cumulative deaths",
    x = NULL,
    colour = "Proj. interval"
  ) +
  guides(
    colour = guide_legend(
      override.aes = list(linewidth = 3)
    )
  ) +
  theme_bw(24, "Arial") +
  fn_theme()

ggsave(
  "figures/plot_compare_deaths_by_age_square.png",
  plot_compare_deaths_by_age,
  height = 14, width = 14
)
```

## Table: Deaths by age

```{r}
fn_qtl <- function(x, probs = c(0.5, 0.25, 0.75)) {
  tibble(
    val = round(quantile(x, probs, na.rm = TRUE)),
    quant = glue::glue("pctl_{probs * 100}")
  ) %>%
    pivot_wider(names_from = "quant", values_from = "val")
}
```

```{r}
data_deaths %>%
  group_by(response, age_group) %>%
  reframe(fn_qtl(reported_value)) %>%
  mutate(
    response = case_when(
      response == "none" ~ "unmitigated",
      response == "economic_closures" ~ "business_closures",
      response == "elimination" ~ "S+B closures",
      .default = response
    )
  ) %>%
  readr::write_csv(
    file = "tables/table_deaths_by_age.csv"
  )
```

## Lost life years, future earnings, and GVA

```{r}
plot_compare_gva_loss <-
  ggplot(data_cost_output) +
  stat_interval(
    aes(
      x = domain, y = cost,
      color = after_stat(
        level
      )
    ),
    .width = c(0.5, 0.95),
    linewidth = 20, alpha = 0.8,
    normalize = "groups"
  ) +
  stat_pointinterval(
    aes(domain, cost)
  ) +
  facet_grid(
    cols = vars(response),
    labeller = labeller(
      response = response_labels
    )
  ) +
  scale_x_discrete(
    labels = loss_measure_labels
  ) +
  scale_y_continuous(
    labels = scales::label_currency(
      scale = 0.7e-3, prefix = "£",
      suffix = " B", accuracy = 1
    )
  ) +
  scale_colour_viridis_d(
    begin = 0.1, direction = -1,
    labels = function(x) {
      scales::percent(as.numeric(x))
    }
  ) +
  labs(
    x = "Domain",
    y = "Cumulative value lost (billion £)",
    col = "Proj. interv.",
    caption = "Valuation of losses from reduced GVA, reduced education, and deaths."
  ) +
  guides(
    colour = guide_legend(
      override.aes = list(linewidth = 3)
    )
  ) +
  theme_bw(24, "Arial") +
  fn_theme()

ggsave(
  "figures/plot_compare_gva_loss.png",
  plot_compare_gva_loss,
  height = 10, width = 21
)
```

```{r}
plot_compare_gva_loss <-
  ggplot(data_cost_output) +
  stat_interval(
    aes(
      x = domain, y = cost,
      color = after_stat(
        level
      )
    ),
    .width = c(0.5, 0.95),
    linewidth = 20, alpha = 0.8,
    normalize = "groups"
  ) +
  stat_pointinterval(
    aes(domain, cost)
  ) +
  facet_wrap(
    vars(response),
    labeller = labeller(
      response = response_labels
    )
  ) +
  scale_x_discrete(
    labels = loss_measure_labels
  ) +
  scale_y_continuous(
    labels = scales::label_currency(
      scale = 0.7e-3, prefix = "£",
      suffix = " B", accuracy = 1
    )
  ) +
  scale_colour_viridis_d(
    begin = 0.1, direction = -1,
    labels = function(x) {
      scales::percent(as.numeric(x))
    }
  ) +
  labs(
    x = "Domain",
    y = "Cumulative value lost (billion £)",
    col = "Proj. interv.",
    caption = "Valuation of losses from reduced GVA, reduced education, and deaths."
  ) +
  guides(
    colour = guide_legend(
      override.aes = list(linewidth = 3)
    )
  ) +
  theme_bw(24, "Arial") +
  fn_theme()

ggsave(
  "figures/plot_compare_gva_loss_square.png",
  plot_compare_gva_loss,
  height = 14, width = 14
)
```

## Table: All-domain losses

```{r}
data_cost_output %>%
  group_by(response, domain) %>%
  reframe(fn_qtl(cost)) %>%
  mutate(
    response = case_when(
      response == "none" ~ "unmitigated",
      response == "economic_closures" ~ "business_closures",
      response == "elimination" ~ "S+B closures",
      .default = response
    )
  ) %>%
  readr::write_csv(
    file = "tables/table_cost_by_response.csv"
  )
```

## Economic losses: Absences

```{r}
plot_compare_econ_cost_absences <-
  ggplot(data_econ_cost_absences) +
  stat_interval(
    aes(
      response,
      y = cost,
      color = after_stat(
        level
      )
    ),
    .width = c(0.5, 0.95),
    linewidth = 30, alpha = 0.8,
    normalize = "groups"
  ) +
  stat_pointinterval(
    aes(response, y = cost)
  ) +
  scale_y_continuous(
    labels = scales::label_currency(
      scale = 0.7e-3, prefix = "£",
      suffix = " B", accuracy = 1
    )
  ) +
  scale_x_discrete(
    labels = response_labels,
    guide = guide_axis(n.dodge = 2)
  ) +
  scale_colour_viridis_d(
    begin = 0.1, direction = -1,
    labels = function(x) {
      scales::percent(as.numeric(x))
    }
  ) +
  labs(
    x = NULL,
    y = "Cumulative value lost (billion £)",
    col = "Proj. interv.",
    caption = "Economic losses from worker absences due to illness or death."
  ) +
  theme_bw(24, "Arial") +
  fn_theme() +
  guides(
    colour = guide_legend(
      override.aes = list(linewidth = 3)
    )
  )

ggsave(
  "figures/plot_compare_econ_cost_absences.png",
  plot_compare_econ_cost_absences,
  height = 7, width = 10
)
```

## Economic losses: Closures

```{r}
plot_compare_econ_cost_closures <-
  ggplot(data_econ_cost_closures) +
  geom_col(
    aes(response, cost, fill = response),
    show.legend = FALSE
  ) +
  scale_x_discrete(
    labels = response_labels,
    guide = guide_axis(n.dodge = 2)
  ) +
  scale_y_continuous(
    labels = scales::label_currency(
      scale = 0.7e-3, prefix = "£",
      suffix = " B", accuracy = 1
    )
  ) +
  scale_fill_brewer(
    palette = "Dark2"
  ) +
  labs(
    x = NULL,
    y = "Cumulative value lost (billion £)",
    col = "Proj. interv.",
    caption = "Economic losses from economic sector closures."
  ) +
  theme_bw(24, "Arial") +
  fn_theme()

ggsave(
  "figures/plot_compare_econ_cost_closures.png",
  plot_compare_econ_cost_closures,
  height = 7, width = 10
)
```

## Table: Economic costs breakdown

```{r}
data_econ_costs %>%
  group_by(response, cost_type) %>%
  reframe(fn_qtl(cost)) %>%
  mutate(
    response = case_when(
      response == "none" ~ "unmitigated",
      response == "economic_closures" ~ "business_closures",
      response == "elimination" ~ "S+B closures",
      .default = response
    )
  ) %>%
  readr::write_csv(
    file = "tables/table_econ_cost_breakdown.csv"
  )
```
